{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/storage.ts"],"sourcesContent":["'use server';\n\nimport fs from 'fs/promises';\nimport path from 'path';\n\n// WARNING: This is a simple file-based storage for a single-session kiosk.\n// It is NOT suitable for multi-user or concurrent environments.\nconst DB_PATH = path.join(process.cwd(), '.db.json');\n\ninterface Session {\n    phone: string;\n    code: string;\n    startTime: string;\n}\n\nasync function readDb(): Promise<Session | null> {\n    try {\n        const data = await fs.readFile(DB_PATH, 'utf-8');\n        return JSON.parse(data);\n    } catch (error: any) {\n        if (error.code === 'ENOENT') {\n            return null; // File doesn't exist, which is fine.\n        }\n        console.error(\"Failed to read from storage:\", error);\n        throw new Error(\"Could not read session data.\");\n    }\n}\n\nasync function writeDb(data: Session | null): Promise<void> {\n    try {\n        if (data === null) {\n            await fs.unlink(DB_PATH);\n        } else {\n            await fs.writeFile(DB_PATH, JSON.stringify(data, null, 2), 'utf-8');\n        }\n    } catch (error) {\n        console.error(\"Failed to write to storage:\", error);\n        throw new Error(\"Could not save session data.\");\n    }\n}\n\n// For this simple kiosk, we assume there's only ever one active session.\nexport async function getActiveSession(): Promise<Session | null> {\n    return await readDb();\n}\n\nexport async function createSession(phone: string): Promise<Session> {\n    const existingSession = await getActiveSession();\n    if (existingSession) {\n        // This case should ideally not happen if the UI is properly disabled.\n        throw new Error(\"Another session is already in progress.\");\n    }\n\n    // Generate a random 6-digit code.\n    const code = Math.floor(100000 + Math.random() * 900000).toString();\n\n    const newSession: Session = {\n        phone: phone,\n        code: code,\n        startTime: new Date().toISOString()\n    };\n    await writeDb(newSession);\n    console.log(`Session created for ${phone} with code ${code}`);\n    return newSession;\n}\n\nexport async function clearActiveSession(): Promise<void> {\n    await writeDb(null);\n    console.log(\"Active session cleared.\");\n}\n"],"names":[],"mappings":";;;;;;;AAEA;AACA;;;;;;AAEA,2EAA2E;AAC3E,gEAAgE;AAChE,MAAM,UAAU,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;AAQzC,eAAe;IACX,IAAI;QACA,MAAM,OAAO,MAAM,qHAAA,CAAA,UAAE,CAAC,QAAQ,CAAC,SAAS;QACxC,OAAO,KAAK,KAAK,CAAC;IACtB,EAAE,OAAO,OAAY;QACjB,IAAI,MAAM,IAAI,KAAK,UAAU;YACzB,OAAO,MAAM,qCAAqC;QACtD;QACA,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,MAAM,IAAI,MAAM;IACpB;AACJ;AAEA,eAAe,QAAQ,IAAoB;IACvC,IAAI;QACA,IAAI,SAAS,MAAM;YACf,MAAM,qHAAA,CAAA,UAAE,CAAC,MAAM,CAAC;QACpB,OAAO;YACH,MAAM,qHAAA,CAAA,UAAE,CAAC,SAAS,CAAC,SAAS,KAAK,SAAS,CAAC,MAAM,MAAM,IAAI;QAC/D;IACJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM,IAAI,MAAM;IACpB;AACJ;AAGO,eAAe;IAClB,OAAO,MAAM;AACjB;AAEO,eAAe,cAAc,KAAa;IAC7C,MAAM,kBAAkB,MAAM;IAC9B,IAAI,iBAAiB;QACjB,sEAAsE;QACtE,MAAM,IAAI,MAAM;IACpB;IAEA,kCAAkC;IAClC,MAAM,OAAO,KAAK,KAAK,CAAC,SAAS,KAAK,MAAM,KAAK,QAAQ,QAAQ;IAEjE,MAAM,aAAsB;QACxB,OAAO;QACP,MAAM;QACN,WAAW,IAAI,OAAO,WAAW;IACrC;IACA,MAAM,QAAQ;IACd,QAAQ,GAAG,CAAC,CAAC,oBAAoB,EAAE,MAAM,WAAW,EAAE,MAAM;IAC5D,OAAO;AACX;AAEO,eAAe;IAClB,MAAM,QAAQ;IACd,QAAQ,GAAG,CAAC;AAChB;;;IA3BsB;IAIA;IAoBA;;AAxBA,+OAAA;AAIA,+OAAA;AAoBA,+OAAA","debugId":null}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/home-assistant.ts"],"sourcesContent":["'use server';\n\nimport { getActiveSession, clearActiveSession } from './storage';\nimport Twilio from 'twilio';\n\nfunction getHaConfig() {\n    // VIETTURIS: Lūdzu, aizstājiet šīs vērtības ar savām, ja nepieciešams!\n    const HA_URL = \"http://192.168.8.120:8123\"; \n    const HA_TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJjMTE4MjQwNjdlYTc0NWI5YTllOGFmMjcxNDViNWQwOSIsImlhdCI6MTc1NTc3NDk4NiwiZXhwIjoyMDcxMTM0OTg2fQ.tKjaJlcFP6TQteVXKV9YUIy5lY0UXR8Od5FSv-D-USo\";\n\n    if (!HA_URL || !HA_TOKEN || HA_TOKEN === \"AIZSTĀJIET_AR_SAVU_LONG_LIVED_TOKENU\") {\n        const errorMessage = `CRITICAL: getHaConfig() failed. HA_URL or HA_TOKEN is not set in src/services/home-assistant.ts. Values found: HA_URL=${HA_URL}, HA_TOKEN is ${HA_TOKEN ? 'present' : 'missing'}`;\n        console.error(errorMessage);\n        throw new Error('Home Assistant nav konfigurēts.');\n    }\n    \n    return { haUrl: HA_URL, haToken: HA_TOKEN };\n}\n\nfunction getTwilioConfig() {\n    const accountSid = process.env.TWILIO_ACCOUNT_SID;\n    const authToken = process.env.TWILIO_AUTH_TOKEN;\n    const twilioPhone = process.env.TWILIO_PHONE_NUMBER;\n\n    if (!accountSid || !authToken || !twilioPhone) {\n        console.warn(\"Twilio environment variables (TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, TWILIO_PHONE_NUMBER) are not set. SMS notifications will be simulated.\");\n        return { configured: false, client: null, twilioPhone: null };\n    }\n     if (accountSid.startsWith('ACxxx') || authToken === 'your_auth_token') {\n        console.warn(\"Using placeholder Twilio credentials. SMS notifications will be simulated.\");\n        return { configured: false, client: null, twilioPhone: null };\n    }\n\n\n    const client = Twilio(accountSid, authToken);\n    return { configured: true, client, twilioPhone };\n}\n\n\nconst LOCK_ENTITY_ID = 'switch.sonoff_1000e6fcb0_1';\nconst DOOR_SENSOR_ENTITY_ID = 'binary_sensor.1_durvis_durvis';\nconst HEAT_ENTITY_ID = 'switch.sonoff_1000e6fcb0_4';\nconst UV_ENTITY_ID = 'switch.sonoff_1000e6fcb0_3';\nconst FANS_ENTITY_ID = 'switch.sonoff_1000e6fcb0_2';\nconst MOTOR_ENTITY_ID = 'switch.sonoff_1000f85860';\nconst BACKUP_CODE = '111111';\n\nconst CLEANING_CYCLE_DURATION_MS = 14 * 60 * 1000; // 14 minutes\nconst VENTILATION_CYCLE_DURATION_MS = 1 * 60 * 1000; // 1 minute\n\nasync function callService(domain: string, service: string, serviceData: object) {\n    const { haUrl, haToken } = getHaConfig();\n\n    const response = await fetch(`${haUrl}/api/services/${domain}/${service}`, {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${haToken}`,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(serviceData),\n        cache: 'no-store' // Ensure fresh calls every time\n    });\n\n    if (!response.ok) {\n        const errorBody = await response.text();\n        console.error(\"Home Assistant API kļūda:\", errorBody);\n        throw new Error(`Neizdevās sazināties ar Home Assistant. Status: ${response.status}`);\n    }\n    return response.json();\n}\n\nasync function getEntityState(entityId: string): Promise<{ state: string }> {\n    const { haUrl, haToken } = getHaConfig();\n\n    const response = await fetch(`${haUrl}/api/states/${entityId}`, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${haToken}`,\n            'Content-Type': 'application/json',\n        },\n        cache: 'no-store' // Ensure fresh state is read\n    });\n\n    if (!response.ok) {\n       const errorBody = await response.text();\n       console.error(\"Home Assistant API kļūda:\", errorBody);\n       throw new Error(`Neizdevās iegūt entītijas stāvokli. Status: ${response.status}`);\n    }\n\n    return response.json();\n}\n\nasync function turnOnSwitch(entityId: string) {\n    return callService('switch', 'turn_on', { entity_id: entityId });\n}\n\nasync function turnOffSwitch(entityId: string) {\n    return callService('switch', 'turn_off', { entity_id: entityId });\n}\n\nasync function pollDoorState(targetState: 'on' | 'off', timeout = 30000, interval = 500) {\n    const startTime = Date.now();\n    while (Date.now() - startTime < timeout) {\n        const doorState = await getEntityState(DOOR_SENSOR_ENTITY_ID);\n        if (doorState.state === targetState) {\n            return;\n        }\n        await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    throw new Error(`Laika limits (30s) pārsniegts, gaidot durvju stāvokli: '${targetState}'.`);\n}\n\n/**\n * Unlocks the door and waits for it to be opened.\n * Throws an error if the door is not opened within the timeout.\n */\nexport async function unlockDoorAndAwaitOpen() {\n    await turnOnSwitch(LOCK_ENTITY_ID);\n\n    try {\n        // Poll for door open status\n        await pollDoorState('on'); // 'on' usually means open for binary_sensor\n    } finally {\n        // Always turn off the switch after the process\n        await turnOffSwitch(LOCK_ENTITY_ID);\n    }\n}\n\n/**\n * Waits for the door to be closed.\n * Throws an error if the door is not closed within the timeout.\n */\nexport async function awaitDoorClose() {\n    // Poll for door close status\n    await pollDoorState('off'); // 'off' usually means closed\n}\n\nasync function sendSmsMessage(to: string, message: string) {\n    const { configured, client, twilioPhone } = getTwilioConfig();\n    if (!configured || !client || !twilioPhone) {\n        console.log(`Twilio nav konfigurēts vai tiek lietotas testa vērtības. Simulēta SMS ziņa uz ${to}: \"${message}\"`);\n        return;\n    }\n\n    try {\n        await client.messages.create({\n            body: message,\n            from: twilioPhone,\n            to: `+371${to}` // Pievienojam Latvijas kodu\n        });\n        console.log(`SMS ziņa veiksmīgi nosūtīta uz ${to}`);\n    } catch (error) {\n        console.error(`Kļūda sūtot SMS ziņu uz ${to}:`, error);\n        // Neizmetam kļūdu, jo paziņojuma nenosūtīšana nav kritiska\n    }\n}\n\n\nasync function sendCompletionNotification() {\n    const session = await getActiveSession();\n    if (session) {\n        const message = `Jūsu apavi ir gatavi izņemšanai. Kods, lai atvērtu durtiņas - ${session.code}`;\n        await sendSmsMessage(session.phone, message);\n    }\n}\n\n\n/**\n * Stops the cleaning cycle by turning off all related switches,\n * and then starts the ventilation cycle.\n */\nexport async function stopCleaningCycle() {\n    console.log(\"Beidzas tīrīšanas cikls...\");\n    try {\n        await Promise.all([\n            turnOffSwitch(HEAT_ENTITY_ID),\n            turnOffSwitch(UV_ENTITY_ID),\n            turnOffSwitch(FANS_ENTITY_ID)\n        ]);\n        console.log(\"Siltums, UV-C un ventilatori ir izslēgti. Sākas vēdināšanas cikls.\");\n        \n        // Start ventilation cycle\n        await turnOnSwitch(MOTOR_ENTITY_ID);\n        console.log(\"Motors ieslēgts uz 1 minūti.\");\n\n        // Schedule motor to turn off and send notification\n        setTimeout(async () => {\n            try {\n                await turnOffSwitch(MOTOR_ENTITY_ID);\n                console.log(\"Vēdināšanas cikls beidzies, motors izslēgts.\");\n                await sendCompletionNotification();\n            } catch (error) {\n                 console.error(\"Kļūda, izslēdzot motoru vai sūtot paziņojumu:\", error);\n            }\n        }, VENTILATION_CYCLE_DURATION_MS);\n\n    } catch (error) {\n        console.error(\"Kļūda, beidzot tīrīšanas ciklu:\", error);\n    }\n}\n\n/**\n * Starts the cleaning cycle and schedules it to stop.\n * This function runs on the server and is not blocking.\n */\nexport async function startCleaningCycle() {\n    console.log(\"Sākas tīrīšanas cikls servera pusē...\");\n    try {\n        await Promise.all([\n            turnOnSwitch(HEAT_ENTITY_ID),\n            turnOnSwitch(UV_ENTITY_ID),\n            turnOnSwitch(FANS_ENTITY_ID)\n        ]);\n        console.log(\"Siltums, UV-C un ventilatori ir ieslēgti.\");\n\n        // Schedule the stop function to run after the duration.\n        // This runs on the server and will not be interrupted if the user navigates away.\n        setTimeout(stopCleaningCycle, CLEANING_CYCLE_DURATION_MS);\n\n        console.log(`Tīrīšanas cikls beigsies pēc ${CLEANING_CYCLE_DURATION_MS / 1000 / 60} minūtēm.`);\n        \n    } catch (error) {\n        console.error(\"Kļūda, sākot tīrīšanas ciklu:\", error);\n        // Attempt to turn everything off in case of a partial failure\n        await stopCleaningCycle();\n        // Re-throw the error to be caught by the UI\n        throw error;\n    }\n}\n\nexport async function checkCode(code: string): Promise<boolean> {\n    if (code === BACKUP_CODE) {\n        console.log(\"Backup code used.\");\n        return true;\n    }\n    const session = await getActiveSession();\n    if (session && session.code === code) {\n        return true;\n    }\n    return false;\n}\n\nexport async function finishSession() {\n    await clearActiveSession();\n    console.log(\"Sesija pabeigta, numurs un kods izdzēsti.\");\n}\n\n/**\n * Forcefully resets the system state.\n * Turns off all switches and clears the active session.\n * To be used when the system is stuck after a restart.\n */\nexport async function forceResetState() {\n    console.warn(\"Piespiedu atiestatīšana sākta...\");\n    try {\n        await Promise.allSettled([\n            turnOffSwitch(LOCK_ENTITY_ID),\n            turnOffSwitch(HEAT_ENTITY_ID),\n            turnOffSwitch(UV_ENTITY_ID),\n            turnOffSwitch(FANS_ENTITY_ID),\n            turnOffSwitch(MOTOR_ENTITY_ID),\n        ]);\n        console.log(\"Visi slēdži ir izslēgti.\");\n\n        await clearActiveSession();\n        console.log(\"Iesprūdusī sesija notīrīta. Sistēma atiestatīta.\");\n    } catch (error) {\n        console.error(\"Kļūda, veicot piespiedu atiestatīšanu:\", error);\n        // Even if there's an error, try to clear the session\n        await clearActiveSession().catch(e => console.error(\"Neizdevās notīrīt sesiju pēc atiestatīšanas kļūdas:\", e));\n        throw new Error(\"Kļūda, veicot atiestatīšanu. Pārbaudiet konsoli.\");\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 481, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getActiveSession as '000d00a7e5ee24027cbe0eb5814f088db3497c2a5a'} from 'ACTIONS_MODULE0'\nexport {forceResetState as '00a044523e88c7e353cac9adc9b30c6a06e0a80440'} from 'ACTIONS_MODULE1'\nexport {unlockDoorAndAwaitOpen as '008df63600d91d9a8264378ee15ef35eabaca97cb7'} from 'ACTIONS_MODULE1'\nexport {checkCode as '402f3b69476f44da7dfc58196ae17593eafa89c5f8'} from 'ACTIONS_MODULE1'\nexport {finishSession as '008fffe3e34bf53ce2c670697b947f58dcf79d32bf'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 548, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 562, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 576, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}