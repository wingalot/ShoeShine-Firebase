{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/home-assistant.ts"],"sourcesContent":["'use server';\n\nimport 'dotenv/config';\n\nconst LOCK_ENTITY_ID = 'switch.sonoff_1000e6fcb0_1';\nconst DOOR_SENSOR_ENTITY_ID = 'binary_sensor.1_durvis_durvis';\n\nfunction getHaConfig() {\n    const HA_URL = process.env.HA_URL;\n    const HA_TOKEN = process.env.HA_TOKEN;\n\n    if (!HA_URL || !HA_TOKEN) {\n        console.error(\"Home Assistant URL or Token is not configured. Door control will not work.\");\n        throw new Error('Home Assistant nav konfigurēts.');\n    }\n    \n    return { haUrl: HA_URL, haToken: HA_TOKEN };\n}\n\n\nasync function callService(domain: string, service: string, serviceData: object) {\n    const { haUrl, haToken } = getHaConfig();\n\n    const response = await fetch(`${haUrl}/api/services/${domain}/${service}`, {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${haToken}`,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(serviceData),\n    });\n\n    if (!response.ok) {\n        const errorBody = await response.text();\n        console.error(\"Home Assistant API kļūda:\", errorBody);\n        throw new Error(`Neizdevās sazināties ar Home Assistant. Status: ${response.status}`);\n    }\n    return response.json();\n}\n\nasync function getEntityState(entityId: string): Promise<{ state: string }> {\n    const { haUrl, haToken } = getHaConfig();\n\n    const response = await fetch(`${haUrl}/api/states/${entityId}`, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${haToken}`,\n            'Content-Type': 'application/json',\n        },\n    });\n\n    if (!response.ok) {\n       const errorBody = await response.text();\n       console.error(\"Home Assistant API kļūda:\", errorBody);\n       throw new Error(`Neizdevās iegūt entītijas stāvokli. Status: ${response.status}`);\n    }\n\n    return response.json();\n}\n\nasync function turnOnSwitch(entityId: string) {\n    return callService('switch', 'turn_on', { entity_id: entityId });\n}\n\nasync function turnOffSwitch(entityId: string) {\n    return callService('switch', 'turn_off', { entity_id: entityId });\n}\n\n/**\n * Unlocks the door and waits for it to be opened.\n * Throws an error if the door is not opened within the timeout.\n */\nexport async function unlockDoorAndAwaitOpen() {\n    await turnOnSwitch(LOCK_ENTITY_ID);\n\n    try {\n        // Poll for door open status\n        const pollUntilOpen = async (timeout = 30000, interval = 500) => {\n            const startTime = Date.now();\n            while (Date.now() - startTime < timeout) {\n                const doorState = await getEntityState(DOOR_SENSOR_ENTITY_ID);\n                if (doorState.state === 'on') { // 'on' usually means open for binary_sensor\n                    return; \n                }\n                await new Promise(resolve => setTimeout(resolve, interval));\n            }\n            throw new Error('Durvis netika atvērtas laikā.');\n        };\n        \n        await pollUntilOpen();\n        \n    } finally {\n        // Always turn off the switch after the process\n        await turnOffSwitch(LOCK_ENTITY_ID);\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEA,MAAM,iBAAiB;AACvB,MAAM,wBAAwB;AAE9B,SAAS;IACL,MAAM,SAAS,QAAQ,GAAG,CAAC,MAAM;IACjC,MAAM,WAAW,QAAQ,GAAG,CAAC,QAAQ;IAErC,IAAI,CAAC,UAAU,CAAC,UAAU;QACtB,QAAQ,KAAK,CAAC;QACd,MAAM,IAAI,MAAM;IACpB;IAEA,OAAO;QAAE,OAAO;QAAQ,SAAS;IAAS;AAC9C;AAGA,eAAe,YAAY,MAAc,EAAE,OAAe,EAAE,WAAmB;IAC3E,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG;IAE3B,MAAM,WAAW,MAAM,MAAM,GAAG,MAAM,cAAc,EAAE,OAAO,CAAC,EAAE,SAAS,EAAE;QACvE,QAAQ;QACR,SAAS;YACL,iBAAiB,CAAC,OAAO,EAAE,SAAS;YACpC,gBAAgB;QACpB;QACA,MAAM,KAAK,SAAS,CAAC;IACzB;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QACd,MAAM,YAAY,MAAM,SAAS,IAAI;QACrC,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM,IAAI,MAAM,CAAC,gDAAgD,EAAE,SAAS,MAAM,EAAE;IACxF;IACA,OAAO,SAAS,IAAI;AACxB;AAEA,eAAe,eAAe,QAAgB;IAC1C,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG;IAE3B,MAAM,WAAW,MAAM,MAAM,GAAG,MAAM,YAAY,EAAE,UAAU,EAAE;QAC5D,QAAQ;QACR,SAAS;YACL,iBAAiB,CAAC,OAAO,EAAE,SAAS;YACpC,gBAAgB;QACpB;IACJ;IAEA,IAAI,CAAC,SAAS,EAAE,EAAE;QACf,MAAM,YAAY,MAAM,SAAS,IAAI;QACrC,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM,IAAI,MAAM,CAAC,4CAA4C,EAAE,SAAS,MAAM,EAAE;IACnF;IAEA,OAAO,SAAS,IAAI;AACxB;AAEA,eAAe,aAAa,QAAgB;IACxC,OAAO,YAAY,UAAU,WAAW;QAAE,WAAW;IAAS;AAClE;AAEA,eAAe,cAAc,QAAgB;IACzC,OAAO,YAAY,UAAU,YAAY;QAAE,WAAW;IAAS;AACnE;AAMO,eAAe;IAClB,MAAM,aAAa;IAEnB,IAAI;QACA,4BAA4B;QAC5B,MAAM,gBAAgB,OAAO,UAAU,KAAK,EAAE,WAAW,GAAG;YACxD,MAAM,YAAY,KAAK,GAAG;YAC1B,MAAO,KAAK,GAAG,KAAK,YAAY,QAAS;gBACrC,MAAM,YAAY,MAAM,eAAe;gBACvC,IAAI,UAAU,KAAK,KAAK,MAAM;oBAC1B;gBACJ;gBACA,MAAM,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;YACrD;YACA,MAAM,IAAI,MAAM;QACpB;QAEA,MAAM;IAEV,SAAU;QACN,+CAA+C;QAC/C,MAAM,cAAc;IACxB;AACJ;;;IAvBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {unlockDoorAndAwaitOpen as '008df63600d91d9a8264378ee15ef35eabaca97cb7'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 182, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 210, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}