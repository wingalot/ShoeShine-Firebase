{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/home-assistant.ts"],"sourcesContent":["'use server';\n\nfunction getHaConfig() {\n    // VIETTURIS: Lūdzu, aizstājiet šīs vērtības ar savām, ja nepieciešams!\n    const HA_URL = \"http://192.168.1.101:8123\"; \n    const HA_TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJjMTE4MjQwNjdlYTc0NWI5YTllOGFmMjcxNDViNWQwOSIsImlhdCI6MTc1NTc3NDk4NiwiZXhwIjoyMDcxMTM0OTg2fQ.tKjaJlcFP6TQteVXKV9YUIy5lY0UXR8Od5FSv-D-USo\";\n\n    if (!HA_URL || !HA_TOKEN || HA_TOKEN === \"AIZSTĀJIET_AR_SAVU_LONG_LIVED_TOKENU\") {\n        const errorMessage = `CRITICAL: getHaConfig() failed. HA_URL or HA_TOKEN is not set in src/services/home-assistant.ts. Values found: HA_URL=${HA_URL}, HA_TOKEN is ${HA_TOKEN ? 'present' : 'missing'}`;\n        console.error(errorMessage);\n        throw new Error('Home Assistant nav konfigurēts.');\n    }\n    \n    return { haUrl: HA_URL, haToken: HA_TOKEN };\n}\n\nconst LOCK_ENTITY_ID = 'switch.sonoff_1000e6fcb0_1';\nconst DOOR_SENSOR_ENTITY_ID = 'binary_sensor.1_durvis_durvis';\nconst HEAT_ENTITY_ID = 'switch.sonoff_1000e6fcb0_4';\nconst UV_ENTITY_ID = 'switch.sonoff_1000e6fcb0_3';\nconst FANS_ENTITY_ID = 'switch.sonoff_1000e6fcb0_2';\nconst MOTOR_ENTITY_ID = 'switch.sonoff_1000f85860';\n\nconst CLEANING_CYCLE_DURATION_MS = 14 * 60 * 1000; // 14 minutes\nconst VENTILATION_CYCLE_DURATION_MS = 1 * 60 * 1000; // 1 minute\n\nasync function callService(domain: string, service: string, serviceData: object) {\n    const { haUrl, haToken } = getHaConfig();\n\n    const response = await fetch(`${haUrl}/api/services/${domain}/${service}`, {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${haToken}`,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(serviceData),\n        cache: 'no-store' // Ensure fresh calls every time\n    });\n\n    if (!response.ok) {\n        const errorBody = await response.text();\n        console.error(\"Home Assistant API kļūda:\", errorBody);\n        throw new Error(`Neizdevās sazināties ar Home Assistant. Status: ${response.status}`);\n    }\n    return response.json();\n}\n\nasync function getEntityState(entityId: string): Promise<{ state: string }> {\n    const { haUrl, haToken } = getHaConfig();\n\n    const response = await fetch(`${haUrl}/api/states/${entityId}`, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${haToken}`,\n            'Content-Type': 'application/json',\n        },\n        cache: 'no-store' // Ensure fresh state is read\n    });\n\n    if (!response.ok) {\n       const errorBody = await response.text();\n       console.error(\"Home Assistant API kļūda:\", errorBody);\n       throw new Error(`Neizdevās iegūt entītijas stāvokli. Status: ${response.status}`);\n    }\n\n    return response.json();\n}\n\nasync function turnOnSwitch(entityId: string) {\n    return callService('switch', 'turn_on', { entity_id: entityId });\n}\n\nasync function turnOffSwitch(entityId: string) {\n    return callService('switch', 'turn_off', { entity_id: entityId });\n}\n\nasync function pollDoorState(targetState: 'on' | 'off', timeout = 30000, interval = 500) {\n    const startTime = Date.now();\n    while (Date.now() - startTime < timeout) {\n        const doorState = await getEntityState(DOOR_SENSOR_ENTITY_ID);\n        if (doorState.state === targetState) {\n            return;\n        }\n        await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    throw new Error(`Laika limits (30s) pārsniegts, gaidot durvju stāvokli: '${targetState}'.`);\n}\n\n/**\n * Unlocks the door and waits for it to be opened.\n * Throws an error if the door is not opened within the timeout.\n */\nexport async function unlockDoorAndAwaitOpen() {\n    await turnOnSwitch(LOCK_ENTITY_ID);\n\n    try {\n        // Poll for door open status\n        await pollDoorState('on'); // 'on' usually means open for binary_sensor\n    } finally {\n        // Always turn off the switch after the process\n        await turnOffSwitch(LOCK_ENTITY_ID);\n    }\n}\n\n/**\n * Waits for the door to be closed.\n * Throws an error if the door is not closed within the timeout.\n */\nexport async function awaitDoorClose() {\n    // Poll for door close status\n    await pollDoorState('off'); // 'off' usually means closed\n}\n\n/**\n * Stops the cleaning cycle by turning off all related switches,\n * and then starts the ventilation cycle.\n */\nexport async function stopCleaningCycle() {\n    console.log(\"Beidzas tīrīšanas cikls...\");\n    try {\n        await Promise.all([\n            turnOffSwitch(HEAT_ENTITY_ID),\n            turnOffSwitch(UV_ENTITY_ID),\n            turnOffSwitch(FANS_ENTITY_ID)\n        ]);\n        console.log(\"Siltums, UV-C un ventilatori ir izslēgti. Sākas vēdināšanas cikls.\");\n        \n        // Start ventilation cycle\n        await turnOnSwitch(MOTOR_ENTITY_ID);\n        console.log(\"Motors ieslēgts uz 1 minūti.\");\n\n        // Schedule motor to turn off\n        setTimeout(async () => {\n            try {\n                await turnOffSwitch(MOTOR_ENTITY_ID);\n                console.log(\"Vēdināšanas cikls beidzies, motors izslēgts.\");\n            } catch (error) {\n                 console.error(\"Kļūda, izslēdzot motoru:\", error);\n            }\n        }, VENTILATION_CYCLE_DURATION_MS);\n\n    } catch (error) {\n        console.error(\"Kļūda, beidzot tīrīšanas ciklu:\", error);\n    }\n}\n\n/**\n * Starts the cleaning cycle and schedules it to stop.\n * This function runs on the server and is not blocking.\n */\nexport async function startCleaningCycle() {\n    console.log(\"Sākas tīrīšanas cikls servera pusē...\");\n    try {\n        await Promise.all([\n            turnOnSwitch(HEAT_ENTITY_ID),\n            turnOnSwitch(UV_ENTITY_ID),\n            turnOnSwitch(FANS_ENTITY_ID)\n        ]);\n        console.log(\"Siltums, UV-C un ventilatori ir ieslēgti.\");\n\n        // Schedule the stop function to run after the duration.\n        // This runs on the server and will not be interrupted if the user navigates away.\n        setTimeout(stopCleaningCycle, CLEANING_CYCLE_DURATION_MS);\n\n        console.log(`Tīrīšanas cikls beigsies pēc ${CLEANING_CYCLE_DURATION_MS / 1000 / 60} minūtēm.`);\n        \n    } catch (error) {\n        console.error(\"Kļūda, sākot tīrīšanas ciklu:\", error);\n        // Attempt to turn everything off in case of a partial failure\n        await stopCleaningCycle();\n        // Re-throw the error to be caught by the UI\n        throw error;\n    }\n}\n"],"names":[],"mappings":";;;;;;IA4FsB,yBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/home-assistant.ts"],"sourcesContent":["'use server';\n\nfunction getHaConfig() {\n    // VIETTURIS: Lūdzu, aizstājiet šīs vērtības ar savām, ja nepieciešams!\n    const HA_URL = \"http://192.168.1.101:8123\"; \n    const HA_TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJjMTE4MjQwNjdlYTc0NWI5YTllOGFmMjcxNDViNWQwOSIsImlhdCI6MTc1NTc3NDk4NiwiZXhwIjoyMDcxMTM0OTg2fQ.tKjaJlcFP6TQteVXKV9YUIy5lY0UXR8Od5FSv-D-USo\";\n\n    if (!HA_URL || !HA_TOKEN || HA_TOKEN === \"AIZSTĀJIET_AR_SAVU_LONG_LIVED_TOKENU\") {\n        const errorMessage = `CRITICAL: getHaConfig() failed. HA_URL or HA_TOKEN is not set in src/services/home-assistant.ts. Values found: HA_URL=${HA_URL}, HA_TOKEN is ${HA_TOKEN ? 'present' : 'missing'}`;\n        console.error(errorMessage);\n        throw new Error('Home Assistant nav konfigurēts.');\n    }\n    \n    return { haUrl: HA_URL, haToken: HA_TOKEN };\n}\n\nconst LOCK_ENTITY_ID = 'switch.sonoff_1000e6fcb0_1';\nconst DOOR_SENSOR_ENTITY_ID = 'binary_sensor.1_durvis_durvis';\nconst HEAT_ENTITY_ID = 'switch.sonoff_1000e6fcb0_4';\nconst UV_ENTITY_ID = 'switch.sonoff_1000e6fcb0_3';\nconst FANS_ENTITY_ID = 'switch.sonoff_1000e6fcb0_2';\nconst MOTOR_ENTITY_ID = 'switch.sonoff_1000f85860';\n\nconst CLEANING_CYCLE_DURATION_MS = 14 * 60 * 1000; // 14 minutes\nconst VENTILATION_CYCLE_DURATION_MS = 1 * 60 * 1000; // 1 minute\n\nasync function callService(domain: string, service: string, serviceData: object) {\n    const { haUrl, haToken } = getHaConfig();\n\n    const response = await fetch(`${haUrl}/api/services/${domain}/${service}`, {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${haToken}`,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(serviceData),\n        cache: 'no-store' // Ensure fresh calls every time\n    });\n\n    if (!response.ok) {\n        const errorBody = await response.text();\n        console.error(\"Home Assistant API kļūda:\", errorBody);\n        throw new Error(`Neizdevās sazināties ar Home Assistant. Status: ${response.status}`);\n    }\n    return response.json();\n}\n\nasync function getEntityState(entityId: string): Promise<{ state: string }> {\n    const { haUrl, haToken } = getHaConfig();\n\n    const response = await fetch(`${haUrl}/api/states/${entityId}`, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${haToken}`,\n            'Content-Type': 'application/json',\n        },\n        cache: 'no-store' // Ensure fresh state is read\n    });\n\n    if (!response.ok) {\n       const errorBody = await response.text();\n       console.error(\"Home Assistant API kļūda:\", errorBody);\n       throw new Error(`Neizdevās iegūt entītijas stāvokli. Status: ${response.status}`);\n    }\n\n    return response.json();\n}\n\nasync function turnOnSwitch(entityId: string) {\n    return callService('switch', 'turn_on', { entity_id: entityId });\n}\n\nasync function turnOffSwitch(entityId: string) {\n    return callService('switch', 'turn_off', { entity_id: entityId });\n}\n\nasync function pollDoorState(targetState: 'on' | 'off', timeout = 30000, interval = 500) {\n    const startTime = Date.now();\n    while (Date.now() - startTime < timeout) {\n        const doorState = await getEntityState(DOOR_SENSOR_ENTITY_ID);\n        if (doorState.state === targetState) {\n            return;\n        }\n        await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    throw new Error(`Laika limits (30s) pārsniegts, gaidot durvju stāvokli: '${targetState}'.`);\n}\n\n/**\n * Unlocks the door and waits for it to be opened.\n * Throws an error if the door is not opened within the timeout.\n */\nexport async function unlockDoorAndAwaitOpen() {\n    await turnOnSwitch(LOCK_ENTITY_ID);\n\n    try {\n        // Poll for door open status\n        await pollDoorState('on'); // 'on' usually means open for binary_sensor\n    } finally {\n        // Always turn off the switch after the process\n        await turnOffSwitch(LOCK_ENTITY_ID);\n    }\n}\n\n/**\n * Waits for the door to be closed.\n * Throws an error if the door is not closed within the timeout.\n */\nexport async function awaitDoorClose() {\n    // Poll for door close status\n    await pollDoorState('off'); // 'off' usually means closed\n}\n\n/**\n * Stops the cleaning cycle by turning off all related switches,\n * and then starts the ventilation cycle.\n */\nexport async function stopCleaningCycle() {\n    console.log(\"Beidzas tīrīšanas cikls...\");\n    try {\n        await Promise.all([\n            turnOffSwitch(HEAT_ENTITY_ID),\n            turnOffSwitch(UV_ENTITY_ID),\n            turnOffSwitch(FANS_ENTITY_ID)\n        ]);\n        console.log(\"Siltums, UV-C un ventilatori ir izslēgti. Sākas vēdināšanas cikls.\");\n        \n        // Start ventilation cycle\n        await turnOnSwitch(MOTOR_ENTITY_ID);\n        console.log(\"Motors ieslēgts uz 1 minūti.\");\n\n        // Schedule motor to turn off\n        setTimeout(async () => {\n            try {\n                await turnOffSwitch(MOTOR_ENTITY_ID);\n                console.log(\"Vēdināšanas cikls beidzies, motors izslēgts.\");\n            } catch (error) {\n                 console.error(\"Kļūda, izslēdzot motoru:\", error);\n            }\n        }, VENTILATION_CYCLE_DURATION_MS);\n\n    } catch (error) {\n        console.error(\"Kļūda, beidzot tīrīšanas ciklu:\", error);\n    }\n}\n\n/**\n * Starts the cleaning cycle and schedules it to stop.\n * This function runs on the server and is not blocking.\n */\nexport async function startCleaningCycle() {\n    console.log(\"Sākas tīrīšanas cikls servera pusē...\");\n    try {\n        await Promise.all([\n            turnOnSwitch(HEAT_ENTITY_ID),\n            turnOnSwitch(UV_ENTITY_ID),\n            turnOnSwitch(FANS_ENTITY_ID)\n        ]);\n        console.log(\"Siltums, UV-C un ventilatori ir ieslēgti.\");\n\n        // Schedule the stop function to run after the duration.\n        // This runs on the server and will not be interrupted if the user navigates away.\n        setTimeout(stopCleaningCycle, CLEANING_CYCLE_DURATION_MS);\n\n        console.log(`Tīrīšanas cikls beigsies pēc ${CLEANING_CYCLE_DURATION_MS / 1000 / 60} minūtēm.`);\n        \n    } catch (error) {\n        console.error(\"Kļūda, sākot tīrīšanas ciklu:\", error);\n        // Attempt to turn everything off in case of a partial failure\n        await stopCleaningCycle();\n        // Re-throw the error to be caught by the UI\n        throw error;\n    }\n}\n"],"names":[],"mappings":";;;;;;IA4GsB,iBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/home-assistant.ts"],"sourcesContent":["'use server';\n\nfunction getHaConfig() {\n    // VIETTURIS: Lūdzu, aizstājiet šīs vērtības ar savām, ja nepieciešams!\n    const HA_URL = \"http://192.168.1.101:8123\"; \n    const HA_TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJjMTE4MjQwNjdlYTc0NWI5YTllOGFmMjcxNDViNWQwOSIsImlhdCI6MTc1NTc3NDk4NiwiZXhwIjoyMDcxMTM0OTg2fQ.tKjaJlcFP6TQteVXKV9YUIy5lY0UXR8Od5FSv-D-USo\";\n\n    if (!HA_URL || !HA_TOKEN || HA_TOKEN === \"AIZSTĀJIET_AR_SAVU_LONG_LIVED_TOKENU\") {\n        const errorMessage = `CRITICAL: getHaConfig() failed. HA_URL or HA_TOKEN is not set in src/services/home-assistant.ts. Values found: HA_URL=${HA_URL}, HA_TOKEN is ${HA_TOKEN ? 'present' : 'missing'}`;\n        console.error(errorMessage);\n        throw new Error('Home Assistant nav konfigurēts.');\n    }\n    \n    return { haUrl: HA_URL, haToken: HA_TOKEN };\n}\n\nconst LOCK_ENTITY_ID = 'switch.sonoff_1000e6fcb0_1';\nconst DOOR_SENSOR_ENTITY_ID = 'binary_sensor.1_durvis_durvis';\nconst HEAT_ENTITY_ID = 'switch.sonoff_1000e6fcb0_4';\nconst UV_ENTITY_ID = 'switch.sonoff_1000e6fcb0_3';\nconst FANS_ENTITY_ID = 'switch.sonoff_1000e6fcb0_2';\nconst MOTOR_ENTITY_ID = 'switch.sonoff_1000f85860';\n\nconst CLEANING_CYCLE_DURATION_MS = 14 * 60 * 1000; // 14 minutes\nconst VENTILATION_CYCLE_DURATION_MS = 1 * 60 * 1000; // 1 minute\n\nasync function callService(domain: string, service: string, serviceData: object) {\n    const { haUrl, haToken } = getHaConfig();\n\n    const response = await fetch(`${haUrl}/api/services/${domain}/${service}`, {\n        method: 'POST',\n        headers: {\n            'Authorization': `Bearer ${haToken}`,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(serviceData),\n        cache: 'no-store' // Ensure fresh calls every time\n    });\n\n    if (!response.ok) {\n        const errorBody = await response.text();\n        console.error(\"Home Assistant API kļūda:\", errorBody);\n        throw new Error(`Neizdevās sazināties ar Home Assistant. Status: ${response.status}`);\n    }\n    return response.json();\n}\n\nasync function getEntityState(entityId: string): Promise<{ state: string }> {\n    const { haUrl, haToken } = getHaConfig();\n\n    const response = await fetch(`${haUrl}/api/states/${entityId}`, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${haToken}`,\n            'Content-Type': 'application/json',\n        },\n        cache: 'no-store' // Ensure fresh state is read\n    });\n\n    if (!response.ok) {\n       const errorBody = await response.text();\n       console.error(\"Home Assistant API kļūda:\", errorBody);\n       throw new Error(`Neizdevās iegūt entītijas stāvokli. Status: ${response.status}`);\n    }\n\n    return response.json();\n}\n\nasync function turnOnSwitch(entityId: string) {\n    return callService('switch', 'turn_on', { entity_id: entityId });\n}\n\nasync function turnOffSwitch(entityId: string) {\n    return callService('switch', 'turn_off', { entity_id: entityId });\n}\n\nasync function pollDoorState(targetState: 'on' | 'off', timeout = 30000, interval = 500) {\n    const startTime = Date.now();\n    while (Date.now() - startTime < timeout) {\n        const doorState = await getEntityState(DOOR_SENSOR_ENTITY_ID);\n        if (doorState.state === targetState) {\n            return;\n        }\n        await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    throw new Error(`Laika limits (30s) pārsniegts, gaidot durvju stāvokli: '${targetState}'.`);\n}\n\n/**\n * Unlocks the door and waits for it to be opened.\n * Throws an error if the door is not opened within the timeout.\n */\nexport async function unlockDoorAndAwaitOpen() {\n    await turnOnSwitch(LOCK_ENTITY_ID);\n\n    try {\n        // Poll for door open status\n        await pollDoorState('on'); // 'on' usually means open for binary_sensor\n    } finally {\n        // Always turn off the switch after the process\n        await turnOffSwitch(LOCK_ENTITY_ID);\n    }\n}\n\n/**\n * Waits for the door to be closed.\n * Throws an error if the door is not closed within the timeout.\n */\nexport async function awaitDoorClose() {\n    // Poll for door close status\n    await pollDoorState('off'); // 'off' usually means closed\n}\n\n/**\n * Stops the cleaning cycle by turning off all related switches,\n * and then starts the ventilation cycle.\n */\nexport async function stopCleaningCycle() {\n    console.log(\"Beidzas tīrīšanas cikls...\");\n    try {\n        await Promise.all([\n            turnOffSwitch(HEAT_ENTITY_ID),\n            turnOffSwitch(UV_ENTITY_ID),\n            turnOffSwitch(FANS_ENTITY_ID)\n        ]);\n        console.log(\"Siltums, UV-C un ventilatori ir izslēgti. Sākas vēdināšanas cikls.\");\n        \n        // Start ventilation cycle\n        await turnOnSwitch(MOTOR_ENTITY_ID);\n        console.log(\"Motors ieslēgts uz 1 minūti.\");\n\n        // Schedule motor to turn off\n        setTimeout(async () => {\n            try {\n                await turnOffSwitch(MOTOR_ENTITY_ID);\n                console.log(\"Vēdināšanas cikls beidzies, motors izslēgts.\");\n            } catch (error) {\n                 console.error(\"Kļūda, izslēdzot motoru:\", error);\n            }\n        }, VENTILATION_CYCLE_DURATION_MS);\n\n    } catch (error) {\n        console.error(\"Kļūda, beidzot tīrīšanas ciklu:\", error);\n    }\n}\n\n/**\n * Starts the cleaning cycle and schedules it to stop.\n * This function runs on the server and is not blocking.\n */\nexport async function startCleaningCycle() {\n    console.log(\"Sākas tīrīšanas cikls servera pusē...\");\n    try {\n        await Promise.all([\n            turnOnSwitch(HEAT_ENTITY_ID),\n            turnOnSwitch(UV_ENTITY_ID),\n            turnOnSwitch(FANS_ENTITY_ID)\n        ]);\n        console.log(\"Siltums, UV-C un ventilatori ir ieslēgti.\");\n\n        // Schedule the stop function to run after the duration.\n        // This runs on the server and will not be interrupted if the user navigates away.\n        setTimeout(stopCleaningCycle, CLEANING_CYCLE_DURATION_MS);\n\n        console.log(`Tīrīšanas cikls beigsies pēc ${CLEANING_CYCLE_DURATION_MS / 1000 / 60} minūtēm.`);\n        \n    } catch (error) {\n        console.error(\"Kļūda, sākot tīrīšanas ciklu:\", error);\n        // Attempt to turn everything off in case of a partial failure\n        await stopCleaningCycle();\n        // Re-throw the error to be caught by the UI\n        throw error;\n    }\n}\n"],"names":[],"mappings":";;;;;;IAsJsB,qBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/place/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { ArrowLeft, Loader2 } from 'lucide-react';\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n    unlockDoorAndAwaitOpen, \n    awaitDoorClose,\n    startCleaningCycle\n} from '@/services/home-assistant';\n\n\nexport default function PlacePage() {\n    const router = useRouter();\n    const { toast } = useToast();\n    const [isLoading, setIsLoading] = useState(false);\n    const [statusMessage, setStatusMessage] = useState('Nospiediet pogu, lai atslēgtu skapīti, ievietotu apavus un sāktu dezinfekcijas ciklu.');\n\n    const handlePlaceShoes = async () => {\n        setIsLoading(true);\n        try {\n            setStatusMessage(\"Atslēdz durvis...\");\n            toast({\n                title: \"Atslēdz durvis...\",\n                description: \"Lūdzu, atveriet skapīša durvis.\",\n            });\n            await unlockDoorAndAwaitOpen();\n            \n            setStatusMessage(\"Durvis atvērtas. Lūdzu, ievietojiet apavus un aizveriet durvis, lai sāktu tīrīšanas ciklu.\");\n            toast({\n                title: \"Ievietojiet apavus\",\n                description: \"Aizveriet durvis, lai sāktu 12 minūšu tīrīšanas ciklu.\",\n            });\n\n            await awaitDoorClose();\n\n            setStatusMessage(\"Durvis aizvērtas. Tīrīšanas cikls sākas...\");\n             toast({\n                title: \"Cikls sākās\",\n                description: \"Siltums, UV-C un ventilatori ir ieslēgti uz 12 minūtēm.\",\n            });\n\n            // This part runs on the server and won't be interrupted if user navigates away.\n            await startCleaningCycle();\n\n            // Navigate away immediately, the cycle runs in the background\n            router.push('/?placed=true');\n\n        } catch (error) {\n            console.error(error);\n            const errorMessage = (error instanceof Error) ? error.message : \"Neizdevās izpildīt darbību.\";\n            setStatusMessage(`Kļūda: ${errorMessage}`);\n            toast({\n                variant: \"destructive\",\n                title: \"Kļūda\",\n                description: errorMessage,\n            });\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <main className=\"flex min-h-screen flex-col items-center justify-center bg-background p-8\">\n            <Card className=\"w-full max-w-md shadow-lg\">\n                <CardHeader>\n                    <CardTitle className=\"text-3xl font-headline\">Ievietot apavus</CardTitle>\n                    <CardDescription>\n                        {statusMessage}\n                    </CardDescription>\n                </CardHeader>\n                <CardContent className=\"flex flex-col space-y-4\">\n                    <Button\n                        size=\"lg\"\n                        className=\"w-full h-24 text-xl font-bold text-primary-foreground bg-gradient-to-br from-blue-500 to-blue-700 hover:from-blue-600 hover:to-blue-800 shadow-lg transition-all duration-200 active:scale-95 active:opacity-90\"\n                        onClick={handlePlaceShoes}\n                        disabled={isLoading}\n                    >\n                        {isLoading ? <Loader2 className=\"mr-2 h-8 w-8 animate-spin\" /> : \"Atslēgt un sākt ciklu\"}\n                    </Button>\n                    <Button variant=\"outline\" asChild>\n                        <Link href=\"/\" className=\"flex items-center justify-center\">\n                            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                            Atpakaļ uz galveno izvēlni\n                        </Link>\n                    </Button>\n                </CardContent>\n            </Card>\n        </main>\n    );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AATA;;;;;;;;;;AAgBe,SAAS;IACpB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD;IACzB,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEnD,MAAM,mBAAmB;QACrB,aAAa;QACb,IAAI;YACA,iBAAiB;YACjB,MAAM;gBACF,OAAO;gBACP,aAAa;YACjB;YACA,MAAM,CAAA,GAAA,uJAAA,CAAA,yBAAsB,AAAD;YAE3B,iBAAiB;YACjB,MAAM;gBACF,OAAO;gBACP,aAAa;YACjB;YAEA,MAAM,CAAA,GAAA,uJAAA,CAAA,iBAAc,AAAD;YAEnB,iBAAiB;YAChB,MAAM;gBACH,OAAO;gBACP,aAAa;YACjB;YAEA,gFAAgF;YAChF,MAAM,CAAA,GAAA,uJAAA,CAAA,qBAAkB,AAAD;YAEvB,8DAA8D;YAC9D,OAAO,IAAI,CAAC;QAEhB,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC;YACd,MAAM,eAAe,AAAC,iBAAiB,QAAS,MAAM,OAAO,GAAG;YAChE,iBAAiB,CAAC,OAAO,EAAE,cAAc;YACzC,MAAM;gBACF,SAAS;gBACT,OAAO;gBACP,aAAa;YACjB;QACJ,SAAU;YACN,aAAa;QACjB;IACJ;IAEA,qBACI,8OAAC;QAAK,WAAU;kBACZ,cAAA,8OAAC,gIAAA,CAAA,OAAI;YAAC,WAAU;;8BACZ,8OAAC,gIAAA,CAAA,aAAU;;sCACP,8OAAC,gIAAA,CAAA,YAAS;4BAAC,WAAU;sCAAyB;;;;;;sCAC9C,8OAAC,gIAAA,CAAA,kBAAe;sCACX;;;;;;;;;;;;8BAGT,8OAAC,gIAAA,CAAA,cAAW;oBAAC,WAAU;;sCACnB,8OAAC,kIAAA,CAAA,SAAM;4BACH,MAAK;4BACL,WAAU;4BACV,SAAS;4BACT,UAAU;sCAET,0BAAY,8OAAC,iNAAA,CAAA,UAAO;gCAAC,WAAU;;;;;uCAAiC;;;;;;sCAErE,8OAAC,kIAAA,CAAA,SAAM;4BAAC,SAAQ;4BAAU,OAAO;sCAC7B,cAAA,8OAAC,4JAAA,CAAA,UAAI;gCAAC,MAAK;gCAAI,WAAU;;kDACrB,8OAAC,gNAAA,CAAA,YAAS;wCAAC,WAAU;;;;;;oCAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQlE","debugId":null}}]
}